plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'com.google.protobuf' version '0.8.17'
    id 'org.beryx.jlink' version '2.25.0'
}

javafx {
    version = JavaVersion.VERSION_11
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

group 'ecdar'
if (project.hasProperty('ecdarVersion')) {
    version = project.ecdarVersion
} else {
    version = '2.3'
}

mainClassName = 'ECDAR'

sourceCompatibility = JavaVersion.VERSION_11
configurations.implementation.setCanBeResolved(true)

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

repositories {
    mavenCentral()
}

def grpcVersion = '1.41.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.17.2'
def protocVersion = protobufVersion

dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation group: 'de.codecentric.centerdevice', name: 'javafxsvg', version: '1.3.0'
    implementation 'org.kordamp.ikonli:ikonli-core:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'org.springframework:spring-core:5.3.10' // Used for evaluating expressions
    implementation 'org.springframework:spring-expression:5.3.10' // Used for evaluating expressions
    implementation 'com.bpodgursky:jbool_expressions:1.23'
    // Used for converting boolean expressions to disjunctive normal form
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.10.6'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //GRPC:
    implementation "com.google.protobuf:protobuf-java:3.18.0"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
    testImplementation group: 'org.testfx', name: 'testfx-junit', version: '4.0.15-alpha'
    testImplementation group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-12.0.1+2'
}


test {
    useJUnitPlatform { includeEngines 'junit-jupiter' }

    filter {
        excludeTestsMatching "ecdar.ui.*"
    }
}

tasks.register('uiTest', Test) {
    filter {
        includeTestsMatching "ecdar.ui.*"
    }

    useJUnitPlatform { includeEngines 'junit-jupiter' }

    // Properties needed for headless UI test execution
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'glass.platform', 'Monocle'
    systemProperty 'monocle.platform', 'Headless'
    systemProperty 'prism.order', 'sw'
    systemProperty 'testfx.setup.timeout', '2500'
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'prism.text', 't2k'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = mainClassName
        jvmArgs = ['-Dlog4j.configurationFile=./log4j2.xml']
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    generated {
        java.srcDir 'src/main/java/'
    }

    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}